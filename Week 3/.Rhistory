format(today, "%j")
# using na.rm
mean(births$gestwks, na.rm=T)
# use of complete.cases()
complete.cases(births)
summary(births)
install.packages('mice')
#menggunakan mice
library(mice)
ini <- mice(births, maxit = 0)
View(ini)
ini
meth <- ini$meth
meth
pred <- ini$pred
pred
pred[, "id"] <- 0
pred[, "bweight"] <- 0
pred[, "lowbw"] <- 0
pred[, "matage"] <- 0
pred[, "hyp"] <- 0
pred[, "sex"] <- 0
pred
imp1 <- mice(popNCR, meth = meth, pred = pred, print = FALSE)
imp1 <- mice(births, meth = meth, pred = pred, print = FALSE)
View(imp1)
summary(complete(imp1))
data(births)
#menggunakan mice
births$preterm <- factor(births$preterm, labels=c("no","yes"))
library(mice)
ini <- mice(births, maxit = 0)
meth <- ini$meth
meth
pred <- ini$pred
pred
pred[, "id"] <- 0
pred[, "bweight"] <- 0
pred[, "lowbw"] <- 0
pred[, "matage"] <- 0
pred[, "hyp"] <- 0
pred[, "sex"] <- 0
pred
meth
imp1 <- mice(births, meth = meth, pred = pred, print = FALSE)
summary(complete(imp1))
# menggunakan paste()
(subvec <- paste("Subject", ".", 0, 1:4, sep=""))
# with the 'collapse' argument
paste("The subjects are:", paste(subvec, collapse=", and "))
# extract bagian dari string
(namevec <- c("01 Mark","02 Tim","03 Robert"))
substr(namevec, start=4, stop=100)
# string matching
match(1:5, 3:6)
1:5 %in% 3:6
# substitute a specific pattern
gsub(" ", ".", namevec)
# identifikasi pola
grep(pattern="a", x=namevec)
# fungsi lain
nchar(namevec)
strsplit(namevec, split=" ")
# objek date
as.Date(c("2000-01-01","1945-04-25"))
as.Date(1:5, origin="1992-12-28")
# format
as.Date("27/02/94", format="%d/%m/%y")
as.Date("03 July 1233", format="%d %b %Y")
head(airquality, 3)
# membuat date
airquality$date <- paste(1973, airquality$Month, airquality$Day) |>
as.Date(format="%Y %m %d")
head(airquality, 3)
data(airquality)
head(airquality, 3)
# menarik info dari dates
(today <- Sys.Date())
format(today, "%a %d %b %Y")
format(today, "%j")
# menghitung dengan date
today + 1000
today - as.Date("1900-01-01")
# aggregating with multiple values
mtcars |>
group_by(vs) |>
reframe(probs=paste0(1:3*25, "%"), mpg=quantile(mpg, 1:3*25/100))
data(mtcars)
# aggregating with multiple values
mtcars |>
group_by(vs) |>
reframe(probs=paste0(1:3*25, "%"), mpg=quantile(mpg, 1:3*25/100))
# load the dplyr and tidyr packages
library(dplyr) ; library(tidyr)
# aggregating with multiple values
mtcars |>
group_by(vs) |>
reframe(probs=paste0(1:3*25, "%"), mpg=quantile(mpg, 1:3*25/100))
# reshaping from wide to long
pivot_longer(sleepwide, cols=2:3, values_to="extra", names_to="group") |>
head(3)
data(sleep)
sleep
# reshaping from long to wide
sleepwide <- pivot_wider(sleep, id_cols=ID, values_from=extra, names_from=group,
names_prefix="extra")
head(sleepwide, 3)
# reshaping from wide to long
pivot_longer(sleepwide, cols=2:3, values_to="extra", names_to="group") |>
head(3)
#1
#Buka data births
library(Epi)
data(births)
summary(births)
births$sex <- factor(births$sex, labels=c("laki-laki","perempuan"))
#3 buat summarise median, mean, maximum, minimum, dari birth berdasarkan sex
births |> group_by(sex) |> summarise(median(bweight), mean(bweight), max(bweight), min(bweight)
#3 buat summarise median, mean, maximum, minimum, dari birth berdasarkan sex
births |> group_by(sex) |> summarise(median(bweight), mean(bweight), max(bweight), min(bweight))
View(births)
# have a look at esoph
data(esoph)
esoph
head(esoph, 3)
# labelling
esoph <- rename(esoph, age=agegp, alcohol=alcgp, tobacco=tobgp, cases=ncases,
controls=ncontrols)
head(esoph, 3)
# subsetting
esoph |> filter(age=="55-64", tobacco %in% c("10-19","20-29")) |>
select(alcohol, tobacco, cases, controls)
# use of specific operators and functions
select(esoph, alcohol:controls) |> head(3)
select(esoph, !alcohol:controls) |> head(3)
select(esoph, -age) |> head(3)
#4 buat interval 0-1000, 1000-1500, 1500-2500, 2500+ dari bweight
births$lowbw <- cut(births$bweight, breaks=c(0,1000,1500,2500,Inf), labels=c("0-1000","1000-1500","1500-2500","2500+"))
data(esoph)
summary(esoph)
setwd("C:/Users/dhihr/Documents/GitHub/R-community/Week 2")
read.csv('customer.csv')
customer <- read.csv('customer.csv')
View(customer)
summary(customer)
# menggunakan paste()
(subvec <- paste("Subject", ".", 0, 1:4, sep=""))
customer$gender_marital <- paste(customer$gender, customer$marital_status, sep = " ")
View(customer)
customer$date_input <- Sys.Date() - 100
#3. berapakah rata-rata mean dari salary? buang variabel dengan missing value
mean(customer$salary, na.rm = T)
na.omit(customer) |> head(4)
customer <- read.csv('customer.csv')
#3. berapakah rata-rata mean dari salary? buang variabel dengan missing value
mean(customer$salary, na.rm = T)
summary(customer)
customer <- read.csv('customer.csv')
#1. buatlah kombinasi gender dan marital_status dengan separator spasi simpan ke variabel baru
customer$gender_marital <- paste(customer$gender, customer$marital_status, sep = " ")
#2. masukkan date input dengan menambahkan 100 hari sebelum tanggal hari ini
customer$date_input <- Sys.Date() - 100
summary(customer)
customer <- read.csv('customer.csv')
summary(customer)
sum(is.na(customer$salary))
customer <- read.csv('customer.csv')
summary(customer)
setwd("C:/Users/dhihr/Documents/GitHub/R-community/Week 3")
customer <- read.csv('customer.csv')
summary(customer)
#3. berapakah rata-rata mean dari salary? buang variabel dengan missing value
mean(customer$salary, na.rm = T)
customer_edit <- na.omit(customer)
summary(customer)
summary(customer_edit)
View(births)
# Introduction to Tidyverse
# first, install reprores package
devtools::install_github("psyteachr/reprores-v2")
# install.packages("devtools")
# install devtools if you dont have
#install tidyverse if you haven't installed the package
# load these library
library(dplyr)
library(tidyr)
library(reprores)
# there are set of data in reprores package
# check it out lists datasets in reprores
data(package = "reprores")
# look at a dataset
smalldata
# loads smalldata into the environment
data("smalldata")
# You can get a quick summary of a dataset with the summary() function.
summary(smalldata)
# You can even do things like calculate the difference between the means of two columns.
pre_mean <- mean(smalldata$pre)
post_mean <- mean(smalldata$post)
post_mean - pre_mean
################################################################################
# Be able to use the 6 main dplyr one-table verbs: select(), filter(), arrange(),
# mutate(), summarise(), group_by()
### select()
# kita pake data disgust
data("disgust", package = "reprores")
# Select columns by name or number.
# You can select each column individually, separated by commas (e.g., col1, col2). You can also select all columns between two columns by separating them with a colon (e.g., start_col:end_col).
moral <- disgust %>%
select(user_id, moral1:moral7)
# You can select columns by number, which is useful when the column names are long or complicated.
sexual <- disgust %>%
select(2, 11:17)
# You can use a minus symbol to unselect columns
pathogen <- disgust %>%
select(-id, -date, -(moral1:sexual7))
# Select columns that start with a character string = start_with.
u <- disgust %>%
select(starts_with("u"))
# Select columns that end with a character string = ends_with.
firstq <- disgust %>%
select(ends_with("1"))
################################################################################
### Filter()
# Select rows by matching column criteria.
# Select all rows where the user_id is 1
user_1 <- disgust %>%
filter(user_id == 1)
# You can select on multiple criteria by separating them with commas.
amoral <- disgust %>% filter(
moral1 == 0,
moral2 == 0,
moral3 == 0,
moral4 == 0,
moral5 == 0,
moral6 == 0,
moral7 == 0
)
# You can use the symbols &, |, and ! to mean "and", "or", and "not". You can also use other operators to make equations.
# everyone who chose either 0 or 7 for question moral1
moral_extremes <- disgust %>%
filter(moral1 == 0 | moral1 == 7)
# everyone who chose the same answer for all moral questions
moral_consistent <- disgust %>%
filter(
moral2 == moral1 &
moral3 == moral1 &
moral4 == moral1 &
moral5 == moral1 &
moral6 == moral1 &
moral7 == moral1
) # biasanya dipake buat eliminate outliers yang gak niat ngisi data
#You can use - install.packages("lubridate") - package to work with dates. For example, you can use the year() function to return just the year from the date column and then select only data collected in 2010.
install.packages("lubridate")
library(lubridate)
disgust2010 <- disgust %>% filter(year(date) == 2010)
################################################################################
### mutate()
disgust_total <- disgust %>%
mutate(moral_total = moral1 + moral2 + moral3 + moral4 + moral5 + moral6 + moral7,
sexual_total = sexual1 + sexual2 + sexual3 + sexual4 + sexual5 + sexual6 + sexual7,
pathogen_total = pathogen1 + pathogen2 + pathogen3 + pathogen4 + pathogen5 + pathogen6 + pathogen7,
total = moral_total + sexual_total + pathogen_total
)
### summarise() = aggregating dataset
# mean(), n(), min(), max(), sd()
disgust_summary<- disgust_total %>%
summarise(
n = n(),
avg_total = mean(total, na.rm = TRUE),
sd_total  = sd(total, na.rm = TRUE),
min_total = min(total, na.rm = TRUE),
max_total = max(total, na.rm = TRUE)
)
moral_summary <- disgust_total %>%
summarise(
mean_moral = mean(moral_total, na.rm = TRUE),
sd_moral = sd(moral_total, na.rm = TRUE),
min_moral = min(moral_total, na.rm = TRUE),
max_moral = max(moral_total, na.rm = TRUE)
)
# group_by()
data("pets")
pet_avg <- pets %>%
group_by(pet) %>%
summarise(avg_weight = mean(weight),
avg_age = mean(age)
)
################### TUGAS
# load dataset "pets" dari package "reprores"
# pilihlah data yang hanya mencakup hewan peliharaan (pet) "dog" saja
# pilihlah kolomn ID, pet, dan score saja
# carilah rata-rata score dari masing2 jenis pet dan country
################################################################################
### inner_join(), full_join()
################################################################################
### pivot_longer(), pivot_wider()
################################################################################
### inner_join(), full_join()
# create demo data
subject <- tibble(
id = 1:5,
gender = c("m", "m", NA, "nb", "f"),
age = c(19, 22, NA, 19, 18)
)
View(subject)
# create another demo data
exp <- tibble(
id = c(2, 3, 4, 4, 5, 5, 6, 6, 7),
score = c(10, 18, 21, 23, 9, 11, 11, 12, 3)
)
View(exp)
left_join(subject, exp, by = "id")
neew_dat <- left_join(subject, exp, by = "id")
new_dat <- left_join(subject, exp, by = "id")
View(neew_dat)
new_dat_left <- left_join(subject, exp, by = "id")
new_dat_exp <- left_join(exp, subject, by = "id")
View(new_dat_exp)
# Create example data frames
df1 <- data.frame(ID = c(1, 2, 3),
Name = c("Alice", "Bob", "Charlie"))
df2 <- data.frame(ID = c(2, 3, 4),
Age = c(30, 25, 35))
# Perform left join
merged_df <- left_join(df1, df2, by = "ID")
View(merged_df)
View(df1)
View(df2)
View(df1)
# Create example data frames
df1 <- data.frame(ID = c(1, 2, 3),
Name = c("Alice", "Bob", "Charlie"))
df2 <- data.frame(ID = c(2, 3, 4),
Age = c(30, 25, 35))
View(df2)
# Perform left join
left_df <- left_join(df1, df2, by = "ID")
View(left_df)
right_df <- right_join(df1, df2, by = "ID")
View(right_df)
right_df <- right_join(df1, df2, by = "Age")
right_df <- right_join(df1, df2, by = "ID")
View(right_df)
# Create example data frames
subject <- tibble(
id = 1:5,
gender = c("m", "m", "f", "nb", "f"),
age = c(19, 22, 95, 19, 18)
)
View(subject)
data <- tibble(
id = c(2, 3, 4, 4, 5, 5, 6, 6, 7),
score = c(10, 18, 21, 23, 9, 11, 11, 12, 3)
)
View(data)
# Perform left join
# A left_join keeps all the data from the first (left) table and joins anything that matches from the second (right) table.
left_df <- left_join(subject, data, by = "ID") # when the rows/column doesnt match, it will return to NA
View(left_df)
# Perform left join
# A left_join keeps all the data from the first (left) table and joins anything that matches from the second (right) table.
left_df <- left_join(subject, data, by = "ID") # when the rows/column doesnt match, it will return to NA
# Perform left join
# A left_join keeps all the data from the first (left) table and joins anything that matches from the second (right) table.
left_df <- left_join(subject, data, by = "id") # when the rows/column doesnt match, it will return to NA
# Create example data frames
subject <- tibble(
id = 1:5,
gender = c("m", "m", "f", "nb", "f"),
age = c(19, 22, 95, 19, 18)
)
data <- tibble(
id = c(2, 3, 4, 4, 5, 5, 6, 6, 7),
score = c(10, 18, 21, 23, 9, 11, 11, 12, 3)
)
## left_join()
# A left_join keeps all the data from the first (left) table and joins anything that matches from the second (right) table.
left_df_subj <- left_join(subject, data, by = "id") # when the rows/column doesnt match, it will return to NA
# The order of tables is swapped here, so the result is all rows from the exp table joined to any matching rows from the subject table.
left_df_exp <- left_join(subject, data, by = "id")
View(left_df_exp)
## left_join()
# A left_join keeps all the data from the first (left) table and joins anything that matches from the second (right) table.
left_df_subj <- left_join(subject, data, by = "id") # when the rows/column doesnt match, it will return to NA
# The order of tables is swapped here, so the result is all rows from the exp table joined to any matching rows from the subject table.
left_df_exp <- left_join(subject, data, by = "id")
View(left_df_subj)
# The order of tables is swapped here, so the result is all rows from the exp table joined to any matching rows from the subject table.
left_df_exp <- left_join(exp, data, by = "id")
# The order of tables is swapped here, so the result is all rows from the exp table joined to any matching rows from the subject table.
left_df_exp <- left_join(data, subject, by = "id")
# Create example data frames
subject <- tibble(
id = 1:5,
gender = c("m", "m", "f", "nb", "f"),
age = c(19, 22, 95, 19, 18)
)
data <- tibble(
id = c(2, 3, 4, 4, 5, 5, 6, 6, 7),
score = c(10, 18, 21, 23, 9, 11, 11, 12, 3)
)
## left_join()
# A left_join keeps all the data from the first (left) table and joins anything that matches from the second (right) table.
left_df_subj <- left_join(subject, data, by = "id") # when the rows/column doesnt match, it will return to NA
# The order of tables is swapped here, so the result is all rows from the exp table joined to any matching rows from the subject table.
left_df_dat <- left_join(data, subject, by = "id")
View(left_df_subj)
View(left_df_dat)
# right_join()
right_join(subject, exp, by = "id")
# right_join()
right_join(subject, data, by = "id")
# right_join()
right_df <- right_join(subject, data, by = "id")
View(right_df)
View(left_df_subj)
View(left_df_dat)
View(left_df_subj)
View(data)
View(subject)
View(right_df)
# inner_join()
inner_df <- inner_join(subject, data, by = "id")
View(inner_df)
# full_join()
full_df <- full_join(subject, exp, by = "id")
# full_join()
full_df <- full_join(subject, data, by = "id")
View(full_df)
################################################################################
### pivot_longer(), pivot_wider()
## load data
data("personality", package = "reprores")
force(personality)
View(personality)
personality_long <- pivot_longer(
data = personality,
cols = Op1:Ex9,                    # columns to make long
names_to = c("domain", "qnumber"), # new column names for headers
names_sep = 2,                     # how to split the headers
values_to = "score"                # new column name for values
) |>
glimpse()
View(personality_long)
View(personality)
personality_long <- pivot_longer(
data = personality,
cols = Op1:Ex9,                    # columns to make long
names_to = c("domain", "qnumber"), # new column names for headers
values_to = "score"                # new column name for values
) |>
glimpse()
View(personality)
################################################################################
### pivot_longer(), pivot_wider()
# Example wide format data
wide_data <- data.frame(
ID = c(1, 2),
Var1 = c(10, 15),
Var2 = c(20, 25),
Var3 = c(30, 35)
)
View(wide_data)
# Pivot wide format data to long format
long_data <- pivot_longer(wide_data,
cols = starts_with("Var"),
names_to = "Variable",
values_to = "Value")
View(long_data)
################################################################################
### pivot_longer(), pivot_wider()
# Example wide format data
wide_data <- data.frame(
ID = 1:4,
Var1 = c(10, 15, 20, 25),
Var2 = c(20, 25, 15, 10),
Var3 = c(30, 35, 15, 20)
)
# Pivot wide format data to long format
long_data <- pivot_longer(wide_data,
cols = starts_with("Var"),
names_to = "Variable",
values_to = "Value")
################################################################################
### pivot_longer(), pivot_wider()
# Example wide format data
wide_data <- data.frame(
ID = 1:4,
Var_psikologis = c(10, 15, 20, 25),
Var_biologis = c(20, 25, 15, 10),
Var_genetis = c(30, 35, 15, 20)
)
################################################################################
### pivot_longer(), pivot_wider()
# Example wide format data
wide_data <- data.frame(
ID = 1:4,
aspek_psikologis = c(10, 15, 20, 25),
aspek_biologis = c(20, 25, 15, 10),
aspek_genetis = c(30, 35, 15, 20)
)
# Pivot wide format data to long format
long_data <- pivot_longer(wide_data,
cols = starts_with("as"), # remember starts_with() ?
names_to = "aspek",
values_to = "score")
View(long_data)
bring_back_to_wider <- pivot_wider(long_data,
names_from = aspek,
values_from = score)
View(bring_back_to_wider)
