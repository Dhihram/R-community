library("visreg")
visreg(LF2, "logfreq", gg = TRUE)
RT.data <- read.csv("http://www.psy.gla.ac.uk/~christop/MScStats/2018/Regress/RTs.csv")
head(RT.data)
# Plot y againts x
x <- RT.data$logfreq
y <- RT.data$R
plot(x, y, xlab = "log lex. frequency", ylab = "RT(ms)")
# Calculate intercept (beta_0) and
# slope (beta_1) "on foot"
slope <- cor(x, y) * (sd (y) / sd (x))
intercept <- mean(y) - slope * mean(x)
# Look at what we’ve done
c("beta_ 0"= intercept, "beta_ 1"= slope)
# using lm() function
LF1 <- lm(y ~ x)
summary(LF1)
# alternatively
LF2 <- lm(RT ~ logfreq, data = RT.data)
summary(LF2)
visreg(LF2, "logfreq", gg = TRUE)
# Linear Regression
library(ggplot2)
visreg(LF2, "logfreq", gg = TRUE)
# function check_model() to check the assumption
check_model(LF2)
# function check_model() to check the assumption
library(check_model)
install.packages(check_model)
# function check_model() to check the assumption
library(performance)
check_model(LF2)
check_collinearity(LF2)
View(LF2)
View(RT.data)
# alternatively
LF2 <- lm(RT ~ logfreq + spelling, data = RT.data)
summary(LF2)
check_model(LF2)
check_collinearity(LF2)
# Linear Regression
library(ggplot2)
RT.data <- read.csv("http://www.psy.gla.ac.uk/~christop/MScStats/2018/Regress/RTs.csv")
View(RT.data)
# Plot y againts x
x <- RT.data$logfreq
y <- RT.data$R
plot(x, y, xlab = "log lex. frequency", ylab = "RT(ms)")
# Calculate intercept (beta_0) and
# slope (beta_1) "on foot"
slope <- cor(x, y) * (sd (y) / sd (x))
intercept <- mean(y) - slope * mean(x)
# Look at what we’ve done
c("beta_ 0"= intercept, "beta_ 1"= slope)
# using lm() function
LF1 <- lm(y ~ x)
summary(LF1)
# alternatively
LF2 <- lm(RT ~ logfreq + spelling, data = RT.data)
summary(LF2)
# Scatterplot with regression line,
# using previous linear fit LF2
# Plot y against x
plot (RT.data$logfreq, RT.data$RT,
xlab = "log lex. frequency",
ylab = "RT(ms)")
abline(LF2, col="red", lwd=2)
title("RT as function of log frequency")
# alternatively
LF2 <- lm(RT ~ logfreq, data = RT.data)
# alternatively
LF_model <- lm(RT ~ logfreq, data = RT.data)
summary(LF2)
LF3 <- lm(RT ~ logfreq + spelling, data = RT.data)
summary(LF3)
RT.data$freqCAT_dev <- ifelse(RT.data$spelling == "lower",-0.5,0.5)
LF3 <- lm(RT ~ logfreq + freqCAT_dev, data = RT.data)
summary(LF3)
# plot confidence interval using predict()
prediction <- predict(LF2, interval = "confidence", level = 0.99)
lines(RT.data$logfreq, prediction[, "lwr"], col="blue", lty=1, lwd = 1)  # Lower CI
lines(RT.data$logfreq, prediction[, "upr"], col="blue", lty=1, lwd = 1)  # Upper CI
# Generate new sequence of x-values to make it smoother
new.x <- seq(-1,4.5, by=0.05)
# Determine CI for each of the new x-values using predict()
# NB: Here, we are using 99% CIs
prd <- predict(LF2, newdata=data.frame(logfreq=new.x),
interval="confidence", level=0.99)
# Add the lower and upper CI limits as lines to the plot
lines(new.x, prd[,2], col="blue", lty=1, lwd=1)
lines(new.x, prd[,3], col="blue", lty=1, lwd=1)
# function check_model() in library performance to check the assumption
library(performance)
check_model(LF2)
# visreg packages
# https://pbreheny.github.io/visreg/
visreg(LF3, "logfreq", gg = TRUE)
check_model(LF2)
check_model(LF3)
check_model(LF2)
# visreg packages
# https://pbreheny.github.io/visreg/
visreg(LF2, "logfreq", gg = TRUE)
LF3 <- lm(RT ~ logfreq + freqCAT_dev, data = RT.data)
virgreg(LF3, "freqCAT_dev", gg = TRUE)
visgreg(LF3, "freqCAT_dev", gg = TRUE)
visreg(LF3, "freqCAT_dev", gg = TRUE)
RT.data$freqCAT_dev <- ifelse(RT.data$spelling == "lower",0,1)
LF3 <- lm(RT ~ logfreq + freqCAT_dev, data = RT.data)
summary(LF3)
visreg(LF3, "freqCAT_dev", gg = TRUE)
RT.data$spel_CAT_dev <- ifelse(RT.data$spelling == "lower",0,1)
LF3 <- lm(RT ~ logfreq + spel_CAT_dev, data = RT.data)
summary(LF3)
visreg(LF3, "spel_CAT_dev", gg = TRUE)
